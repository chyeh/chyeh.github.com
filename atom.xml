<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[chyeh's Octopress Blog]]></title>
  <link href="http://chyeh.github.com/atom.xml" rel="self"/>
  <link href="http://chyeh.github.com/"/>
  <updated>2013-04-07T16:42:45+08:00</updated>
  <id>http://chyeh.github.com/</id>
  <author>
    <name><![CDATA[chyeh]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Multimedia Communications Homework #2]]></title>
    <link href="http://chyeh.github.com/blog/2013/04/07/multimedia-communications-homework-number-2/"/>
    <updated>2013-04-07T15:53:00+08:00</updated>
    <id>http://chyeh.github.com/blog/2013/04/07/multimedia-communications-homework-number-2</id>
    <content type="html"><![CDATA[<h2>Algorithm</h2>

<p>本次作業的演算法參考課程講義<strong>chap-05</strong>之中<strong>第10到18頁</strong>，<strong>Case Study: Block-based approach</strong>的部分。然而講義當中計算<strong>SASD</strong>的算法並沒有說明邊界blocks的情況。因此我的<strong>SASD值沒有計算那些邊界的blocks</strong>。其中<strong>threshhold</strong>的判定方式，我由觀察測資算出之結果後才加已決定算法。由於有<strong>三個不同的矩陣Y, U, V</strong>，因此照此演算法會算出<strong>三個矩陣的ratio</strong>。如果要檢查是否為<strong>Abrupt Scene Change</strong>，則此三個ratio只要有兩個<strong>大於1.5</strong>，即判定為超過threshhold。若是要檢查是否為<strong>Gradual Scene Change</strong>，則只要有一個<strong>ratio大於2.1</strong>，即判定為超過threshhold。如果<strong>已經判定為Abrupt Scene Change，將不繼續檢查是否為Gradual Scene Change</strong>。</p>

<hr />

<h2>解壓縮</h2>

<p>請下指令：</p>

<pre><code>$ tar -zxvf 0156545-葉治宏-mc102-hw2.tar.gz
</code></pre>

<hr />

<h2>How to Compile</h2>

<p>請移到解壓縮後的目錄底下，直接下make指令:</p>

<pre><code>$ cd 0156545-葉治宏-mc102-hw2/
$ make
</code></pre>

<hr />

<h2>Usage</h2>

<h3>使用方法如下：</h3>

<pre><code>$ scp
Usage: yay [-s &lt;widht&gt;x&lt;heigh&gt;] [-f format] [-p] filename.yuv  
    format can be: 0-Y only, 1-YUV420, 2-YUV422, 3-YUV444
    specify '-p' to enable semi-planar mode
</code></pre>

<h3>舉例來說：</h3>

<p>若要測試測資<strong>test1.yuv</strong>:</p>

<pre><code>$ scd -s 176x144 -f 1 test1.yuv
</code></pre>

<p>若要測試測資<strong>test2.yuv</strong>:</p>

<pre><code>$ scd -s 352x288 -f 1 test2.yuv
</code></pre>

<hr />

<h2>Result</h2>

<h3>第一筆測資<code>test1.yuv</code></h3>

<pre><code>$ scd -s 176x144 -f 1 test1.yuv
...(省略，那些是我自己寫的debug訊息)
$ cat output.txt
31 Abrupt
65 Gradual
</code></pre>

<h3>第二筆測資<code>test2.yuv</code></h3>

<pre><code>$ rm output.txt                     #把test1.yuv的結果先刪除
$ scd -s 352x288 -f 1 test2.yuv
...(省略，同上)
$ cat output.txt
31 Abrupt
63 Gradual
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Raduis Portal懶人包]]></title>
    <link href="http://chyeh.github.com/blog/2013/03/28/raduis-portallan-ren-bao/"/>
    <updated>2013-03-28T15:45:00+08:00</updated>
    <id>http://chyeh.github.com/blog/2013/03/28/raduis-portallan-ren-bao</id>
    <content type="html"><![CDATA[<h2>1.建立專案</h2>

<p>輸入以下指令：</p>

<pre><code>$ rails new rails3-bootstrap-devise-cancan -m https://raw.github.com/RailsApps/rails-composer/master/composer.rb -T
</code></pre>

<p>此指令將會建立一個<a href="https://github.com/RailsApps/rails3-bootstrap-devise-cancan">rails3-bootstrap-devise-cancan</a>專案。輸入指令之後，terminal會出現以下幾個問題：</p>

<pre><code>question  Install an example application?
      1)  I want to build my own application
      2)  membership/subscription/saas
      3)  rails-prelaunch-signup
      4)  rails3-bootstrap-devise-cancan
      5)  rails3-devise-rspec-cucumber
      6)  rails3-mongoid-devise
      7)  rails3-mongoid-omniauth
      8)  rails3-subdomains
railsapps  Enter your selection: 4
//略...
question  Web server for development?
      1)  WEBrick (default)
      2)  Thin
      3)  Unicorn
      4)  Puma
   setup  Enter your selection: 1
//略...
question  Web server for production?
      1)  Same as development
      2)  Thin
      3)  Unicorn
      4)  Puma
   setup  Enter your selection: 2
//略...
question  Template engine?
      1)  ERB
      2)  Haml
      3)  Slim (experimental)
   setup  Enter your selection: 1
</code></pre>

<p>其中，在選擇production server的時候選thin，正式上線才不會出現一堆debug用的log。之後還有一些問題要回答，如下：</p>

<pre><code>extras  Set a robots.txt file to ban spiders? (y/n) y
//略...
extras  Create a GitHub repository? (y/n) n
//略...
extras  Use or create a project-specific rvm gemset and .rvmrc? (y/n) y
//略...
extras  Add 'therubyracer' JavaScript runtime (for Linux users without node.js)? (y/n) y
</code></pre>

<p>關於<strong>robots.txt</strong>，git頁面的說明如下：</p>

<blockquote><p>Set a robots.txt file to ban spiders if you want to keep your new site out of Google search results.</p></blockquote>

<p>接著打入以下指令之後，瀏覽<a href="http://localhost:3000/">http://localhost:3000/</a>應該就會有東西了：</p>

<pre><code>$ cd rails3-bootstrap-devise-cancan
$ bundle install
$ rails s
</code></pre>

<hr />

<h2>2.將devise-radius-authenticatable加入專案</h2>

<p>編輯<code>Gemfile</code>，在最後一行加上：</p>

<pre><code>gem "devise-radius-authenticatable"
</code></pre>

<p>之後打入指令：</p>

<pre><code>$ bundle install
$ generate devise:install
</code></pre>

<p>會出現以下訊息，請選Y：</p>

<pre><code>    conflict  config/initializers/devise.rb
Overwrite /home/chyehlt/ror/test/rails3-bootstrap-devise-cancan/config/initializers/devise.rb? (enter "h" for help) [Ynaqdh] Y
</code></pre>

<p>編輯<code>app/models/user.rb</code>，並在原本的<strong>:database_authenticatable</strong>前面加上<strong>:radius_authenticatable</strong>。接著，打入以下指令：</p>

<pre><code>$ rails generate devise_radius_authenticatable:install &lt;IP&gt; &lt;SECRET&gt; [options]
</code></pre>

<p>接下來請參考了git頁面說明文件，編輯<code>config/initializers/devise.rb</code>。請在<strong>warden</strong>的部份加入幾行code，如下：</p>

<pre><code>config.warden do |warden_config|
  warden_config.default_strategies(:database_authenticatable,
                                   :radius_authenticatable,
                                   {:scope =&gt; :admin})
end
</code></pre>

<p>其中，database的method寫在前面，所以server會先檢查資料庫，有的話就算認證成功。如果資料庫這關沒過，就再問radius。至於 <strong>:scope => :admin</strong> 其實我不太知道這行是幹嘛的。接著，將此行：</p>

<pre><code>config.radius_uid_field = :uid
</code></pre>

<p>改為</p>

<pre><code>config.radius_uid_field = :email
</code></pre>

<p>最後，若要測試請打以下指令，應該就算完成了吧！</p>

<pre><code>$ rails s
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[researches survey]]></title>
    <link href="http://chyeh.github.com/blog/2013/03/15/researches-survey/"/>
    <updated>2013-03-15T11:29:00+08:00</updated>
    <id>http://chyeh.github.com/blog/2013/03/15/researches-survey</id>
    <content type="html"><![CDATA[<h2>Projects</h2>

<h3>1.  OpenFlow Wireless</h3>

<h4>Abstract</h4>

<p>把Open vSwitch取代手機上原本的Linux Bridge,並利用openflow controller作為controller plane去控制此vSwitch，讓手機能夠同時access多個wireless networks，這樣便能解決穿梭在不同AP涵蓋範圍的時候,網路會瞬斷的問題</p>

<h4>Publications</h4>

<ol>
<li>OpenRoads-Empowering Research in Mobile Networks (2 pages)</li>
<li>The Stanford OpenRoads Deployment (10 pages)</li>
<li>Blueprint for Introducing Innovation into Wireless Mobile Networks(8 pages)</li>
</ol>


<h3>2.  Packet and Circuit Network Convergence (正在讀)</h3>

<h4>Abstract</h4>

<p>利用OpenFlow將packet switch 與 circuit switch結合起來</p>

<h4>Publications</h4>

<ol>
<li>Unified Control Architecture for Packet and Circuit Network Convergence (278 pages)</li>
<li>Rethinking IP Core Networks (12 pages)</li>
<li>SDN Based Unified Control Architecture (2 pages)</li>
<li>Why OpenFlow/SDN Can Succeed Where GMPLS Failed (3 pages)</li>
<li>Application-Aware Aggregation and Traffic Engineering in a Converged Packet-Circuit Network (3 pages)</li>
<li>Packet and Circuit Network Convergence with OpenFlow (3 pages)</li>
<li>Experimental Demonstration of OpenFlow Control of Packet and Circuit Switches (3 pages)</li>
<li>Unifying Packet and Circuit Switched Networks (6 pages)</li>
</ol>


<hr />

<h2>Papers</h2>

<h3>1.  Aster*x: Load-Balancing as a Network Primitive</h3>

<h4>Abstract</h4>

<p>以前的load balancing都要放一台device在網路的choke point那台switch上，固定在定點沒有彈性。要更有彈性的話就是在許多switch上都放load balancing device，不過成本很高。此研究利用openflow switch來做load-balancing來解決此問題。</p>

<h3>2.  ElasticTree: Saving Energy in Data Center Networks (16 pages) (正在讀)</h3>

<h4>Abstract</h4>

<p>隨traffic demamd的大小，動態決定data center network topologies中links的多寡。可改善data center的能源消耗。</p>

<hr />

<h2>其他主題(還未研究)</h2>

<ul>
<li>Dynamic Flow Aggregation in an OpenFlow Network</li>
<li>Open Pipes: Hardware System Design with OpenFlow</li>
<li>Providing MPLS Services with OpenFlow</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deploy Octopress on Github Pages]]></title>
    <link href="http://chyeh.github.com/blog/2013/03/03/deploy-octopress-on-github-pages/"/>
    <updated>2013-03-03T23:50:00+08:00</updated>
    <id>http://chyeh.github.com/blog/2013/03/03/deploy-octopress-on-github-pages</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>此篇紀錄我如何將<a href="http://octopress.org/">Octopress</a>架設在<a href="https://github.com/">Git</a>所提供的網頁空間<a href="http://pages.github.com/">Github Pages</a>上。以下是我的環境：</p>

<ul>
<li>作業系統：Linux Mint 13</li>
<li>Ruby版本：ruby 1.9.3p385 (2013-02-06 revision 39114) [x86_64-linux]</li>
</ul>


<p>若要將Octopress做為自己的網誌架構架，並要架設在像 <strong>http://你的帳號.github.com</strong> 這樣的網址，所要作的步驟大致上如下：</p>

<ol>
<li>將Octopress專案下載下來</li>
<li>在Git上建立給個人網頁使用的repository</li>
<li>設定ssh key</li>
<li>將網誌專案push到Git上</li>
</ol>


<hr />

<h2>1.   將Octopress專案下載下來</h2>

<p>第一步，用git指令下載：</p>

<pre><code>$ git clone git://github.com/imathis/octopress.git octopress &amp;&amp; cd octopress
</code></pre>

<p>接下來需要安裝一些dependencies：</p>

<pre><code>$ sudo gem install bundler
$ bundle exec rake install
</code></pre>

<hr />

<h2>2.   在Git上建立個人網頁使用的repository</h2>

<p>先架好Github Pages預設的網頁專案，之後我們會再將Octopress的專案Push上此專案的repository。</p>

<h3>Create the repository</h3>

<p>首先在Git上建立一個新的repository。可以在git網頁右上角點<a href="https://github.com/new">repo</a>那個按鈕，進入新增repository的頁面。在Repository name那個欄位填上&#8221;<strong>xxx.github.com</strong>&#8221;(<strong>xxx</strong>指的是你的<strong>git帳號</strong>)。填玩之後，按下最下面的create repository鍵。</p>

<h3>Github Pages</h3>

<p>再來，進入此repository的管理頁面。按下setting選項進入設定頁面，點下Automatic Page Generator按鍵。直接到最下面按下Continue to Layouts按鍵。按下PUBLISH那個綠勾勾。此時 <strong>http://你的帳號.github.com</strong> 應該已經會有網頁了！這個步驟可能是非必要的，我不確定是否按下PUBLISH鍵才會啟動repository的web server。反正我是做了XD。</p>

<hr />

<h2>3.   設定ssh key</h2>

<p>接著回到repository的setting管理頁面，點選左邊的Deploy Keys並按下Add deploy key。</p>

<h3>檢查是否已有ssh key</h3>

<p>首先，先檢查一下是否已經generate過ssh key了。如果已經有了ssh key，就可以直接跳至<strong>利用工具複製ssh key</strong>的部份。打以下指令看是否能將key fingerprint印出：</p>

<pre><code>$ ssh-add -l
2048 ba:ca:35:bb:a6:86:c9:f3:9c:5b:9e:f7:4e:f4:db:11  xxx@xxxxx.com (RSA)
</code></pre>

<p>照理來講，如果有顯示下面那一行key fingerprint，就表示已經有key了。如果並沒有顯示key fingerprint，而是顯示像以下訊息：</p>

<pre><code>$ ssh-add -l
Could not open a connection to your authentication agent.
</code></pre>

<p>則改用以下指令：</p>

<pre><code>$ ssh-keygen -lf ~/.ssh/id_rsa.pub
2048 ba:ca:35:bb:a6:86:c9:f3:9c:5b:9e:f7:4e:f4:db:11  xxx@xxxxx.com (RSA)
</code></pre>

<p>如果兩種情況都無法印出key fingerprint，檢查在。可能是本來就沒有generate過ssh key。檢查一下<code>~/.ssh</code>目錄底下是否有<code>id_rsa</code>和<code>id_rsa.pub</code>兩個檔案。如果沒有的話，表示沒有generate過ssh key。</p>

<h3>產生ssh key</h3>

<p>打入指令：</p>

<pre><code>$ ssh-keygen -t rsa -C "your_email@example.com"
$ ssh-add ~/.ssh/id_rsa
</code></pre>

<p>產生key的時候會問一些問題，不想理他的話就一直按enter吧。到這一步驟應該已經有ssh key了，接下來就把她填到git上吧！</p>

<h3>利用工具複製ssh key</h3>

<p>為了防止不小心多複製或少複製一兩個字元的這種錯誤，所以最好使用xclip這個小工具。首先安裝xclip：</p>

<pre><code>$ sudo apt-get install xclip
</code></pre>

<p>安裝好之後，下面這行指令將會把你的key一字元無差地複製進你的剪貼簿：</p>

<pre><code>$ xclip -sel clip &lt; ~/.ssh/id_rsa.pub
</code></pre>

<h3>deploy key</h3>

<p>回到剛剛Add deploy key的那個頁面。下面有一個很大的key的欄位。直接貼上剛剛複製進剪貼簿的key，並按下下面的Add key按鈕。然後網頁會跳到confirm的頁面，輸入完git的密碼之後就完成了Deploy Keys的動作了。</p>

<h3>git ssh 測試</h3>

<p>首先要對git設定使用者與信箱：</p>

<pre><code>$ git config --global user.name "xxx"
$ git config --global user.email xxx@xxxx.com
</code></pre>

<p>以上的步驟應該完成ssh key的設置了！可以打以下指令測試，正常的話應該能產生歡迎訊息：</p>

<pre><code>$ ssh -T git@github.com
Hi xxx/xxx.github.com! You've successfully authenticated, but GitHub does not provide shell access.
</code></pre>

<hr />

<h2>4.   將專案push到Git上</h2>

<p>首先我們必須先設定repository的ssh url。點進repository管理頁面，便能找到ssh的url。然後照著以下輸入指令與url：</p>

<pre><code>$ bundle exec rake setup_github_pages
Enter the read/write url for your repository
(For example, 'git@github.com:your_username/your_username.github.com)
Repository url: git@github.com:xxx/xxx.github.com.git
</code></pre>

<p>再來，產生blog並複製產生的檔案到_deploy/底下：</p>

<pre><code>$ bundle exec rake generate
$ bundle exec rake deploy
</code></pre>

<p>最後，如果想要寫一篇網誌的話，先用以下指令產生編寫的.markdown檔：</p>

<pre><code>$ bundle exec rake new_post[title]
</code></pre>

<p>編輯產生出來的<code>source/_posts/2013-03-03-title.markdown</code>這一個.markdown檔案。完成文章編寫之後，打以下指令之後便可在 http://localhost:4000/ 預覽：</p>

<pre><code>$ bundle exec rake preview
</code></pre>

<p>若確認無誤，只要打以下指令便能將網址push上git，更新你的網頁了！</p>

<pre><code>$ bundle exec rake generate
$ git add .
$ git push origin source
$ bundle exec rake deploy
</code></pre>

<hr />

<h2>References</h2>

<ol>
<li><a href="http://zerodie.github.com/blog/2012/01/19/octopress-github-pages/">http://zerodie.github.com/blog/2012/01/19/octopress-github-pages/</a></li>
<li><a href="http://www.ypwang.info/blog/blog/2012/04/15/octopress-an-zhuang/">http://www.ypwang.info/blog/blog/2012/04/15/octopress-an-zhuang/</a></li>
<li><a href="https://help.github.com/categories/56/articles">https://help.github.com/categories/56/articles</a></li>
<li><a href="http://stackoverflow.com/questions/9560892/permissions-error-github-ssh-key-not-recognized">http://stackoverflow.com/questions/9560892/permissions-error-github-ssh-key-not-recognized</a></li>
</ol>

]]></content>
  </entry>
  
</feed>
